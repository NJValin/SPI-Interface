
`default_nettype none

module spi_top #(
	parameter DATA_WIDTH   = 8,
	parameter BUFFER_DEPTH = 4
	)
	(
	input  logic                  clk_in, // Will be gated to form sclk
	input  logic [DATA_WIDTH-1:0] data_in,
	output logic [DATA_WIDTH-1:0] data_out,

	input  logic                   write,
	input  logic                   read,

	// CSR values. The associated registers should be generated by integrating project
	input  logic                  enable, //SPI enable
	input  logic                  master_en, // Master mode enable
	input  logic                  spi_3wire, // If set, mosi will be used for both read and write transactions
	input  logic                  stop_in_idle, // Stop in IDLE mode
	input  logic                  cpol, // Clock polarity in IDLE mode
	input  logic                  cpha, // determines clock phase
	output logic				  rx_v, // Overflow in receiving flag
	output logic                  tx_buf_full, // Transmit buffer full
	output logic                  rx_buf_full, // Receive buffer full


	inout  tri                    cs_b,
	inout  tri                    mosi,
	inout  tri                    miso,
	inout  tri                    sclk
	);

	logic                         master_CS_b;
	logic                         master_clock;
	logic                         in_idle;

	enum logic [1:0] {MAS_IDLE,
					  MAS_WRITE,
					  MAS_READ} master_state;
	
	enum logic [1:0] {SLV_IDLE,
					  SLV_WRITE,
					  SLV_READ} slave_state;

	assign CS_b = (master_en==1'b1)?master_CS_b:1'bz; // In slave mode, the value resolved will be the val driven by the master
	
	
endmodule
